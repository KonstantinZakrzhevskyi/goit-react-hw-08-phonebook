{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Section/Section.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","views/ContactsPage.js","components/Section/Section.module.css"],"names":["module","exports","Section","title","children","className","s","section","section__title","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","normalizeFilter","toLowerCase","trim","contact","name","includes","ContactForm","useState","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","handleInputChange","e","currentTarget","value","reset","form","onSubmit","preventDefault","map","toast","error","contactsOperations","addContact","success","form__label","form__input","type","pattern","required","onChange","form__btn","disabled","Filter","filter__label","filter__text","filter__input","contactsActions","changeFilter","ContactList","useEffect","fetchContacts","contact__list","id","contact__item","contact__text","contact__btn","onClick","deleteContact","onDeleteContact","Contacts"],"mappings":"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","file":"static/js/3.175bd625.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1yMOc\",\"form__label\":\"ContactForm_form__label__W2aUn\",\"form__input\":\"ContactForm_form__input__UWres\",\"form__btn\":\"ContactForm_form__btn__HjAEm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__text\":\"Filter_filter__text__k_Xnl\",\"filter__input\":\"Filter_filter__input__27ovC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__list\":\"ContactList_contact__list__33Clf\",\"contact__item\":\"ContactList_contact__item__1Lqaj\",\"contact__text\":\"ContactList_contact__text__2nsRi\",\"contact__btn\":\"ContactList_contact__btn__3N1II\"};","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      {title && <h2 className={s.section__title}>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizeFilter = filter.toLowerCase().trim();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizeFilter),\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toast } from 'react-hot-toast';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts/index';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    contacts.map(contact => contact.name).includes(name)\r\n      ? toast.error(`${name} is already in contacts.`)\r\n      : dispatch(contactsOperations.addContact({ name, number }));\r\n\r\n    reset();\r\n    toast.success('addContact');\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.form__label}>\r\n        Name\r\n        <input\r\n          className={s.form__input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n\r\n      <label className={s.form__label}>\r\n        Number\r\n        <input\r\n          className={s.form__input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <button className={s.form__btn} type=\"submit\" disabled={!name}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsActions, contactsSelectors } from 'redux/contacts/index';\r\n\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter() {\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.filter__label}>\r\n      <p className={s.filter__text}>Find contacts by name</p>\r\n      <input\r\n        className={s.filter__input}\r\n        type=\"text\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={value}\r\n        onChange={e =>\r\n          dispatch(contactsActions.changeFilter(e.currentTarget.value))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts/index';\r\nimport { toast } from 'react-hot-toast';\r\n\r\nimport s from './ContactList.module.css';\r\n\r\nfunction ContactList() {\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = id =>\r\n    dispatch(\r\n      contactsOperations.deleteContact(id),\r\n      toast.success('Delete contact'),\r\n    );\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <ul className={s.contact__list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={s.contact__item} key={id}>\r\n          <p className={s.contact__text}>{name}:</p>\r\n          <p className={s.contact__text}>{number}</p>\r\n          <button\r\n            className={s.contact__btn}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport Section from 'components/Section';\r\nimport ContactForm from 'components/ContactForm';\r\nimport Filter from 'components/Filter';\r\nimport ContactList from 'components/ContactList';\r\n\r\nconst Contacts = () => (\r\n  <>\r\n    <Section title=\"Phonebook\">\r\n      <ContactForm />\r\n    </Section>\r\n\r\n    <Section title=\"Contacts\">\r\n      <Filter />\r\n      <ContactList />\r\n    </Section>\r\n  </>\r\n);\r\n\r\nexport default Contacts;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3VJzt\",\"section__title\":\"Section_section__title__2yEtU\"};"],"sourceRoot":""}